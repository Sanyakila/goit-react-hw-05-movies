{"version":3,"file":"static/js/544.f724d664.chunk.js","mappings":"0MAGaA,GAAiBC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,iN,mBCqB3B,EApBkB,SAAC,GAAgB,IAAdE,EAAa,EAAbA,OACXC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,0BACI,wBACKF,EAAOG,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtB,OACI,yBACI,SAACT,EAAD,CAAgBU,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAApD,SACKI,GAASC,KAFTF,EAMhB,OAIhB,C,oICcD,UA9Ba,WACT,OAA4CM,EAAAA,EAAAA,YAA5C,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAiBA,OAfAC,EAAAA,EAAAA,YAAU,WACNH,GAAa,GACb,IAAMI,EAAiB,mCAAG,6GAECC,EAAAA,GAAAA,sBAFD,OAEZC,EAFY,OAGlBR,EAAkBQ,GAHA,gDAKlBJ,EAAS,KAAMK,SALG,yBAOlBP,GAAa,GAPK,4EAAH,qDAUvBI,GACH,GAAE,KAGC,gCACI,wBAAI,mBACHL,IAAa,SAAC,IAAD,IACbE,GAASO,EAAAA,GAAAA,MAAY,kBACrBX,IAAkB,SAAC,IAAD,CAAWX,OAAQW,MAGjD,C,wDChCKY,E,QAAYC,EAAAA,OAAa,CAC3BC,QAAS,iCAGPC,EAAU,mCAEHC,EAAmB,mCAAG,oGACRJ,EAAUK,IAAI,sBAAuB,CACxDC,OAAQ,CACJC,QAASJ,KAHc,cACzBK,EADyB,yBAMxBA,EAASX,KAAKY,SANU,2CAAH,qDASnBC,EAAgB,mCAAG,WAAOC,GAAP,uFACLX,EAAUK,IAAI,iBAAkB,CACnDC,OAAQ,CACJC,QAASJ,EACTS,MAAOD,KAJa,cACtBH,EADsB,yBAQrBA,EAASX,KAAKY,SARO,2CAAH,sDAWhBI,EAAc,mCAAG,WAAOhC,GAAP,uFACHmB,EAAUK,IAAV,iBAAwBxB,EAAxB,KAA+B,CAClDyB,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASX,MAPU,2CAAH,sDAUdiB,EAAc,mCAAG,WAAOjC,GAAP,uFACHmB,EAAUK,IAAV,iBAAwBxB,EAAxB,aAAuC,CAC1DyB,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASX,KAAKkB,MAPK,2CAAH,sDAUdC,EAAiB,mCAAG,WAAOnC,GAAP,uFACNmB,EAAUK,IAAV,iBAAwBxB,EAAxB,aAAuC,CAC1DyB,OAAQ,CACJC,QAASJ,KAHY,cACvBK,EADuB,yBAOtBA,EAASX,KAAKY,SAPQ,2CAAH,sDAUxBb,EAAM,CACRQ,oBAAAA,EACAM,iBAAAA,EACAG,eAAAA,EACAC,eAAAA,EACAE,kBAAAA,GAGJ,M","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Home/Home.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from \"react-router-dom\";\n\nexport const TrendMovieLink = styled(Link)`\n    text-decoration: none;\n    font-family: Verdana, Geneva, Tahoma, sans-serif;\n    margin-left: 15;\n    color: black;\n    &:hover,\n    &:focus {\n        color: #32CD32;\n    }\n`;","import { TrendMovieLink } from \"./MovieList.styled\";\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <div>\n            <ul>\n                {movies.map(({ id, title, name }) => {\n                    return (\n                        <li key={id}>\n                            <TrendMovieLink to={`/movies/${id}`} state={{ from: location }}>\n                                {title || name}\n                            </TrendMovieLink>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string,\n            name: PropTypes.string\n        })\n    ),\n};","import MovieList from \"components/MovieList/MovieList\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { useState, useEffect } from \"react\";\nimport { toast } from \"react-toastify\";\nimport api from \"services/Api\";\n\nconst Home = () => {\n    const [moviesTrending, setMoviesTrending] = useState();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    useEffect(() => {\n        setIsLoading(true);\n        const getMoviesTrending = async () => {\n            try {\n                const data = await api.fetchMoviesTrending();\n                setMoviesTrending(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        getMoviesTrending();\n    }, []);\n\n    return (\n        <section>\n            <h2>Trending today</h2>\n            {isLoading && <Loader />}\n            {error && toast.error(\"We have error!\")}\n            {moviesTrending && <MovieList movies={moviesTrending} />}\n        </section>\n    )\n}\n\nexport default Home;","import axios from \"axios\";\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = '6aa771366ac6b5ed8b84d1848afc45ff';\n\nexport const fetchMoviesTrending = async () => {\n    const response = await moviesAPI.get('trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n    return response.data.results;\n}\n\nexport const fetchMovieSearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\nexport const fetchMovieInfo = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesTrending,\n    fetchMovieSearch,\n    fetchMovieInfo,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["TrendMovieLink","styled","Link","movies","location","useLocation","map","id","title","name","to","state","from","useState","moviesTrending","setMoviesTrending","isLoading","setIsLoading","error","setError","useEffect","getMoviesTrending","api","data","message","toast","moviesAPI","axios","baseURL","API_KEY","fetchMoviesTrending","get","params","api_key","response","results","fetchMovieSearch","searchQuery","query","fetchMovieInfo","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}