{"version":3,"file":"static/js/246.905db7ba.chunk.js","mappings":"yPAEaA,EAAOC,EAAAA,GAAAA,GAAH,wKAUJC,EAAOD,EAAAA,GAAAA,GAAH,oEAKJE,EAAYF,EAAAA,GAAAA,EAAH,2CAITG,EAAeH,EAAAA,GAAAA,EAAH,iD,iDC6BzB,EA3Ca,WACT,OAAwBI,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,WACNL,GAAa,GACb,IAAMM,EAAS,mCAAG,6GAESC,EAAAA,GAAAA,eAAmBJ,GAF5B,OAEJK,EAFI,OAGVV,EAAQU,GAHE,gDAKVN,EAAS,KAAMO,SALL,yBAOVT,GAAa,GAPH,4EAAH,qDAUfM,GACH,GAAE,CAACH,IAIJ,OACI,gCACKJ,IAAa,SAACW,EAAA,EAAD,IACbT,IAAS,uBAAG,WACK,KAAb,OAAJJ,QAAI,IAAJA,OAAA,EAAAA,EAAMc,UAAgB,SAAChB,EAAD,UAAc,8CACpCE,IACG,SAACN,EAAD,UACKM,EAAKe,KAAI,gBAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,UAAWC,EAAvB,EAAuBA,KAAMC,EAA7B,EAA6BA,aAA7B,OACN,0BACKA,GAAgB,gBAAKC,IAX/B,kCAW6CD,EAAcE,IAAKH,EAAMI,MAAO,OAAY,gBAAKF,I,ihQAAoBC,IAAI,YAAYC,MAAO,IAAKC,OAAQ,OAC7I,SAAC3B,EAAD,UAAOsB,KACP,UAACrB,EAAD,WAAW,cAAYoB,OAHlBD,EADH,QAW7B,C,wDC9CKQ,E,QAAYC,EAAAA,OAAa,CAC3BC,QAAS,iCAGPC,EAAU,mCAEHC,EAAmB,mCAAG,oGACRJ,EAAUK,IAAI,sBAAuB,CACxDC,OAAQ,CACJC,QAASJ,KAHc,cACzBK,EADyB,yBAMxBA,EAASrB,KAAKsB,SANU,2CAAH,qDASnBC,EAAgB,mCAAG,WAAOC,GAAP,uFACLX,EAAUK,IAAI,iBAAkB,CACnDC,OAAQ,CACJC,QAASJ,EACTS,MAAOD,KAJa,cACtBH,EADsB,yBAQrBA,EAASrB,KAAKsB,SARO,2CAAH,sDAWhBI,EAAc,mCAAG,WAAOC,GAAP,uFACHd,EAAUK,IAAV,iBAAwBS,EAAxB,KAA+B,CAClDR,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASrB,MAPU,2CAAH,sDAUd4B,EAAc,mCAAG,WAAOD,GAAP,uFACHd,EAAUK,IAAV,iBAAwBS,EAAxB,aAAuC,CAC1DR,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASrB,KAAKX,MAPK,2CAAH,sDAUdwC,EAAiB,mCAAG,WAAOF,GAAP,uFACNd,EAAUK,IAAV,iBAAwBS,EAAxB,aAAuC,CAC1DR,OAAQ,CACJC,QAASJ,KAHY,cACvBK,EADuB,yBAOtBA,EAASrB,KAAKsB,SAPQ,2CAAH,sDAUxBvB,EAAM,CACRkB,oBAAAA,EACAM,iBAAAA,EACAG,eAAAA,EACAE,eAAAA,EACAC,kBAAAA,GAGJ,M","sources":["pages/Cast/Cast.styled.jsx","pages/Cast/Cast.jsx","services/Api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 16px;\n    justify-content: center;\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Name = styled.h4`\n    width: 220px;\n    margin-bottom: 8px;\n`;\n\nexport const Character = styled.p`\n    width: 220px;\n`;\n\nexport const NotFoundCast = styled.p`\n    text-align: center;\n`;","import { List, Name, Character, NotFoundCast } from './Cast.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from '../../components/Loader/Loader';\nimport api from 'services/Api';\nimport ImageNotFound from './InageNotFound.png';\n\nconst Cast = () => {\n    const [cast, setCast] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const movieCast = async () => {\n            try {\n                const data = await api.fetchMovieCast(movieId);\n                setCast(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        movieCast();\n    }, [movieId]);\n\n    const imgUrl = 'https://image.tmdb.org/t/p/w500';\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {error && <p>Error!</p>}\n            {cast?.length === 0 && <NotFoundCast>We don't have any information about cast.</NotFoundCast>}\n            {cast &&\n                <List>\n                    {cast.map(({ cast_id, character, name, profile_path }) => (\n                        <li key={cast_id}>\n                            {profile_path ? (<img src={imgUrl + profile_path} alt={name} width={200} />) : (<img src={ImageNotFound} alt='Not found' width={200} height={330} />)}\n                            <Name>{name}</Name>\n                            <Character>Character: {character}</Character>\n                    </li>\n                ))}\n                </List>\n            }\n        </>\n    )\n}\n\nexport default Cast;","import axios from \"axios\";\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = '6aa771366ac6b5ed8b84d1848afc45ff';\n\nexport const fetchMoviesTrending = async () => {\n    const response = await moviesAPI.get('trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n    return response.data.results;\n}\n\nexport const fetchMovieSearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\nexport const fetchMovieInfo = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesTrending,\n    fetchMovieSearch,\n    fetchMovieInfo,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["List","styled","Name","Character","NotFoundCast","useState","cast","setCast","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","movieCast","api","data","message","Loader","length","map","cast_id","character","name","profile_path","src","alt","width","height","moviesAPI","axios","baseURL","API_KEY","fetchMoviesTrending","get","params","api_key","response","results","fetchMovieSearch","searchQuery","query","fetchMovieInfo","id","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}